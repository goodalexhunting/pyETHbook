import multiprocessing as mp








MESSAGE FORMAT:
(EXCHANGE_NAME, PRICE_LEVEL, NEW_QTY) 
(EXCHANGE_NAME, asks[[PRICE_LEVEL,NEW_QTY]], bids[[PRICE_LEVEL,NEW_QTY]]) 



@dataclass(frozen=True, slots=True)
class OrderbookEvent:
    exhchange_name: str
    asks: list[list[float]] | None = None
    bids: list[list[float]] | None = None


class CombinedBook():
for cls in exhanges.globals()
    def __init__(self) -> None:
        self.asks = SortedDict()
        self.bids = SortedDict()
        self.live = Live()
        self.exchanges = [BinanceOrderBook, CoinbaseOrderBook, KrakenOrderBook, FtxOrderBook]
        self.messaging_queue = mp.Queue()
        self.exchanges = [cls(self.messagin_queue) for cls in exchanges]

    def _generate_table(self) -> Table
        //
    
    def _process_message(self, message:OrderbookEvent) -> None:
        for price, qty in message.bids:
            self.bids[price].update_quantity(message.exhange_name, quantity)
        for price, qty in message.asks:
            self.asks[price].update_quantity(message.exhange_name, quantity)

    def run() -> None:
        for exchange in exchanges:
            exchanges.run()
        
        while True:
            message = self.message_queue.get()
            if message is None:
                continue
            else:
                self._process_message(message)
                self.generate_table()
    
    
